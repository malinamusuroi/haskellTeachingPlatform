module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function () {
  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message = message;
    this.expected = expected;
    this.found = found;
    this.location = location;
    this.name = 'SyntaxError';

    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function (expected, found) {
    const DESCRIBE_EXPECTATION_FNS = {
      literal(expectation) {
        return `"${literalEscape(expectation.text)}"`;
      },

      class(expectation) {
        let escapedParts = '';
        let i;

        for (i = 0; i < expectation.parts.length; i++) {
          escapedParts += expectation.parts[i] instanceof Array
            ? `${classEscape(expectation.parts[i][0])}-${classEscape(expectation.parts[i][1])}`
            : classEscape(expectation.parts[i]);
        }

        return `[${expectation.inverted ? '^' : ''}${escapedParts}]`;
      },

      any(expectation) {
        return 'any character';
      },

      end(expectation) {
        return 'end of input';
      },

      other(expectation) {
        return expectation.description;
      },
    };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, ch => `\\x0${hex(ch)}`)
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => `\\x${hex(ch)}`);
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g, '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g, ch => `\\x0${hex(ch)}`)
        .replace(/[\x10-\x1F\x7F-\x9F]/g, ch => `\\x${hex(ch)}`);
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      const descriptions = new Array(expected.length);
      let i; let
        j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return `${descriptions[0]} or ${descriptions[1]}`;

        default:
          return `${descriptions.slice(0, -1).join(', ')
          }, or ${
            descriptions[descriptions.length - 1]}`;
      }
    }

    function describeFound(found) {
      return found ? `"${literalEscape(found)}"` : 'end of input';
    }

    return `Expected ${describeExpected(expected)} but ${describeFound(found)} found.`;
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    const peg$FAILED = {};

    const peg$startRuleFunctions = { start: peg$parsestart };
    let peg$startRuleFunction = peg$parsestart;

    const peg$c0 = function (functionDefinition) { return functionDefinition; };
    const peg$c1 = function (typeSignature, patterns) {
      return {
        kind: 'functionDefinition',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: typeSignature && typeSignature.functionName && typeSignature.functionName.name,
        nameStartPosition: typeSignature && typeSignature.functionName && typeSignature.functionName.startPosition,
        nameEndPosition: typeSignature && typeSignature.functionName && typeSignature.functionName.endPosition,
        typeSignature,
        patterns,
      };
    };
    const peg$c2 = '::';
    const peg$c3 = peg$literalExpectation('::', false);
    const peg$c4 = function (functionName, head, tail) {
        	return {
            	kind: 'typeSignature',
            	types: [head].concat(tail),
        functionName,
      };
    };
    const peg$c5 = '_';
    const peg$c6 = peg$literalExpectation('_', false);
    const peg$c7 = function () { return { kind: 'typeSignature', isUnderscore: true }; };
    const peg$c8 = '[';
    const peg$c9 = peg$literalExpectation('[', false);
    const peg$c10 = ']';
    const peg$c11 = peg$literalExpectation(']', false);
    const peg$c12 = function (type) {
      return {
        kind: 'arrayType',
        name: type.name,
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        isUnderscore: type.isUnderscore,
      };
    };
    const peg$c13 = function (arrayType) { return arrayType; };
    const peg$c14 = /^[A-Za-z]/;
    const peg$c15 = peg$classExpectation([['A', 'Z'], ['a', 'z']], false, false);
    const peg$c16 = function (type) {
      return {
        kind: 'type',
        name: type.join(''),
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
      };
    };
    const peg$c17 = function () {
      return {
        kind: 'type',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        isUnderscore: true,
      };
    };
    const peg$c18 = ' -> ';
    const peg$c19 = peg$literalExpectation(' -> ', false);
    const peg$c20 = function (type) { return type; };
    const peg$c21 = '\n';
    const peg$c22 = peg$literalExpectation('\n', false);
    const peg$c23 = function (functionName, part) {
      return {
        kind: 'pattern',
        name: functionName.name,
        isUnderscore: functionName.isUnderscore,
        lineNumber: part.lineNumber,
        startPosition: functionName.startPosition,
        endPosition: functionName.endPosition,
        arguments: part.arguments,
        expression: part.expression,
      };
    };
    const peg$c24 = function () { return { kind: 'pattern', isUnderscore: true }; };
    const peg$c25 = '=';
    const peg$c26 = peg$literalExpectation('=', false);
    const peg$c27 = function (patternArguments, exp) {
      return {
        kind: 'pattern',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        arguments: patternArguments,
        expression: exp,
      };
    };
    const peg$c28 = function (pattern) { return pattern; };
    const peg$c29 = function () {
      return {
        kind: 'emptyListPattern',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        value: '[]',
      };
    };
    const peg$c30 = '(';
    const peg$c31 = peg$literalExpectation('(', false);
    const peg$c32 = ':';
    const peg$c33 = peg$literalExpectation(':', false);
    const peg$c34 = ')';
    const peg$c35 = peg$literalExpectation(')', false);
    const peg$c36 = function (left, right) {
      return {
        kind: 'listPattern',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        left,
        right,
      };
    };
    const peg$c37 = function (exp) {
      return {
        kind: 'bracketedExpression',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        expression: exp,
      };
    };
    const peg$c38 = function () {
      return {
        kind: 'expression',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        isUnderscore: true,
      };
    };
    const peg$c39 = function (f, args) {
      return {
        kind: 'functionApplication',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        functionName: f,
        arguments: args,
      };
    };
    const peg$c40 = function () {
      return {
        kind: 'functionApplication',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        isUnderscore: true,
      };
    };
    const peg$c41 = function (left, f, right) {
      return {
        kind: 'functionApplication', lineNumber: location().start.line, functionName: f, arguments: [left, right],
      };
    };
    const peg$c42 = function (exp1, list) { list.unshift(exp1); return list; };
    const peg$c43 = function (exp) { return exp; };
    const peg$c44 = function (list) { return { kind: 'list', lineNumber: location().start.line, items: list || [] }; };
    const peg$c45 = function () { return { kind: 'list', isUnderscore: true }; };
    const peg$c46 = ',';
    const peg$c47 = peg$literalExpectation(',', false);
    const peg$c48 = '$';
    const peg$c49 = peg$literalExpectation('$', false);
    const peg$c50 = function (dollar, letters) {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: (dollar || '') + letters.join(''),
        infix: false,
      };
    };
    const peg$c51 = function () {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        isUnderscore: true,
      };
    };
    const peg$c52 = '+';
    const peg$c53 = peg$literalExpectation('+', false);
    const peg$c54 = function () {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: '+',
        infix: true,
      };
    };
    const peg$c55 = '-';
    const peg$c56 = peg$literalExpectation('-', false);
    const peg$c57 = function () {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: '-',
        infix: true,
      };
    };
    const peg$c58 = function () {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: ':',
        infix: true,
      };
    };
    const peg$c59 = '||';
    const peg$c60 = peg$literalExpectation('||', false);
    const peg$c61 = function () {
      return {
        kind: 'functionName',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        name: '||',
        infix: true,
      };
    };
    const peg$c62 = function () { return { kind: 'functionName', isUnderscore: true }; };
    const peg$c63 = /^[0-9]/;
    const peg$c64 = peg$classExpectation([['0', '9']], false, false);
    const peg$c65 = function (digits) {
      return {
        kind: 'int',
        lineNumber: location().start.line,
        startPosition: location().start.column,
        endPosition: location().end.column,
        value: parseInt(digits.join(''), 10),
      };
    };
    const peg$c66 = function () { return { kind: 'int', isUnderscore: true }; };
    const peg$c67 = ' ';
    const peg$c68 = peg$literalExpectation(' ', false);
    const peg$c69 = /^[ \n]/;
    const peg$c70 = peg$classExpectation([' ', '\n'], false, false);

    let peg$currPos = 0;
    let peg$savedPos = 0;
    const peg$posDetailsCache = [{ line: 1, column: 1 }];
    let peg$maxFailPos = 0;
    let peg$maxFailExpected = [];
    const peg$silentFails = 0;

    let peg$result;

    if ('startRule' in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error(`Can't start parsing from rule "${options.startRule}".`);
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location,
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: 'literal', text, ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return {
        type: 'class', parts, inverted, ignoreCase,
      };
    }

    function peg$anyExpectation() {
      return { type: 'any' };
    }

    function peg$endExpectation() {
      return { type: 'end' };
    }

    function peg$otherExpectation(description) {
      return { type: 'other', description };
    }

    function peg$computePosDetails(pos) {
      let details = peg$posDetailsCache[pos]; let
        p;

      if (details) {
        return details;
      }
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }

    function peg$computeLocation(startPos, endPos) {
      const startPosDetails = peg$computePosDetails(startPos);
      const endPosDetails = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line: startPosDetails.line,
          column: startPosDetails.column,
        },
        end: {
          offset: endPos,
          line: endPosDetails.line,
          column: endPosDetails.column,
        },
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location,
      );
    }

    function peg$parsestart() {
      let s0;

      s0 = peg$parsefunctionDefinitionList();

      return s0;
    }

    function peg$parsefunctionDefinitionList() {
      let s0; let
        s1;

      s0 = [];
      s1 = peg$parsefunctionDefinitionPlusWhitespace();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$parsefunctionDefinitionPlusWhitespace();
      }

      return s0;
    }

    function peg$parsefunctionDefinitionPlusWhitespace() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      s1 = peg$parsefunctionDefinition();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace_newline();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace_newline();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunctionDefinition() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      s1 = peg$parsefunctionDefinitionTypeSignature();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsefunctionDefinitionPatternLine();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsefunctionDefinitionPatternLine();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunctionDefinitionTypeSignature() {
      let s0; let s1; let s2; let s3; let s4; let s5; let s6; let
        s7;

      s0 = peg$currPos;
      s1 = peg$parsefunctionName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c2) {
            s3 = peg$c2;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetype();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$parsearrowAndType();
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$parsearrowAndType();
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c4(s1, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c7();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsearrayType() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetype() {
      let s0; let s1; let
        s2;

      s0 = peg$currPos;
      s1 = peg$parsearrayType();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c13(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c14.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c14.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c16(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c5;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17();
          }
          s0 = s1;
        }
      }

      return s0;
    }

    function peg$parsearrowAndType() {
      let s0; let s1; let
        s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c18) {
        s1 = peg$c18;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetype();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c20(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunctionDefinitionPatternLine() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 10) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c22); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefunctionName();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsefunctionDefinitionPatternPartOfLine();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c23(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (input.charCodeAt(peg$currPos) === 10) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 10) {
            s2 = peg$c21;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s2 = peg$c5;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c6); }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsefunctionDefinitionPatternPartOfLine() {
      let s0; let s1; let s2; let s3; let s4; let
        s5;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsepatternWithWhitespace();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsepatternWithWhitespace();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c26); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpressionWithFunction();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c27(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepatternWithWhitespace() {
      let s0; let s1; let
        s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepattern();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepattern() {
      let s0; let s1; let s2; let s3; let s4; let s5; let s6; let s7; let s8; let
        s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c10;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c11); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c29();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c30;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c31); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parsewhitespace();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsewhitespace();
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parsefunctionName();
            if (s3 !== peg$FAILED) {
              s4 = [];
              s5 = peg$parsewhitespace();
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$parsewhitespace();
              }
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s5 = peg$c32;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c33); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = [];
                  s7 = peg$parsewhitespace();
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    s7 = peg$parsewhitespace();
                  }
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsefunctionName();
                    if (s7 !== peg$FAILED) {
                      s8 = [];
                      s9 = peg$parsewhitespace();
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parsewhitespace();
                      }
                      if (s8 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s9 = peg$c34;
                          peg$currPos++;
                        } else {
                          s9 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c35); }
                        }
                        if (s9 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c36(s3, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parsefunctionName();
          if (s0 === peg$FAILED) {
            s0 = peg$parseinteger();
          }
        }
      }

      return s0;
    }

    function peg$parseexpression() {
      let s0; let s1; let s2; let s3; let s4; let
        s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c30;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c31); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpressionWithFunction();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c34;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c35); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c37(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parselist();
        if (s0 === peg$FAILED) {
          s0 = peg$parseinteger();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefunctionName();
          }
        }
      }

      return s0;
    }

    function peg$parseexpressionWithFunction() {
      let s0; let
        s1;

      s0 = peg$parseinfixFunctionApplication();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefunctionApplication();
        if (s0 === peg$FAILED) {
          s0 = peg$parseexpression();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s1 = peg$c5;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c38();
            }
            s0 = s1;
          }
        }
      }

      return s0;
    }

    function peg$parsefunctionApplication() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      s1 = peg$parsefunctionName();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseexpression_list();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c39(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c40();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseinfixFunctionApplication() {
      let s0; let s1; let s2; let s3; let s4; let
        s5;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinfixFunctionName();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseexpressionWithFunction();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c41(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseexpression_list() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsewhitespace_expression();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsewhitespace_expression();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewhitespace_expression() {
      let s0; let s1; let
        s2;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpression();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c43(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parselist() {
      let s0; let s1; let s2; let s3; let s4; let
        s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsewhitespace();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomma_expression_list();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsewhitespace();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c10;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c11); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c44(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c45();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsecomma_expression_list() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      s1 = peg$parseexpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecomma_expression();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsecomma_expression();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c42(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecomma_expression() {
      let s0; let s1; let s2; let s3; let
        s4;

      s0 = peg$currPos;
      s1 = peg$parsewhitespace();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c46;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c47); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsewhitespace();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseexpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c43(s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefunctionName() {
      let s0; let s1; let s2; let
        s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c14.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c14.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c15); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c50(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c51();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseinfixFunctionName() {
      let s0; let
        s1;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c52;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c54();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c55;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c56); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c57();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c32;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c33); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c58();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c59) {
              s1 = peg$c59;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c60); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c61();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 95) {
                s1 = peg$c5;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c6); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c62();
              }
              s0 = s1;
            }
          }
        }
      }

      return s0;
    }

    function peg$parseinteger() {
      let s0; let s1; let
        s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c63.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c63.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c64); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c65(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c5;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c6); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66();
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parsewhitespace() {
      let s0; let
        s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (input.charCodeAt(peg$currPos) === 32) {
            s1 = peg$c67;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsewhitespace_newline() {
      let s0; let
        s1;

      s0 = [];
      if (peg$c69.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c69.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    }
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
    );
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse: peg$parse,
  };
}());
